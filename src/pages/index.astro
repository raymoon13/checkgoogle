---
import Layout from "../layouts/Layout.astro";

const { cookies } = Astro;
const userCookie = cookies.get("user")?.value;
const user = userCookie ? JSON.parse(userCookie) : null;
---

<Layout>
  <div class="container">
    <h1>Google Admin Users</h1>

    {
      !user ? (
        <div class="auth-required">
          <h2>Authentication Required</h2>
          <p>You need to sign in with Google to view users.</p>
          <button id="signin-button" class="auth-button">
            Sign in with Google
          </button>
        </div>
      ) : (
        <div>
          <div class="user-info">
            <p>
              Signed in as: <strong>{user.name}</strong> ({user.email})
            </p>
            <button id="load-users-button" class="load-button">
              Load Users
            </button>
          </div>

          <div id="loading" class="loading" style="display: none;">
            <div class="loading-content">
              <div class="spinner"></div>
              <div class="loading-text">Loading users...</div>
              <div id="progress-info" class="progress-info" style="display: none;">
                <div class="progress-bar">
                  <div id="progress-fill" class="progress-fill"></div>
                </div>
                <div class="progress-text">
                  <span id="progress-current">0</span> / <span id="progress-total">0</span> users processed
                </div>
              </div>
            </div>
          </div>
          <div id="error" class="error" style="display: none;" />

          <div id="users-container" style="display: none;">
            <div class="stats">
              <span id="user-count">0</span> users found
            </div>

            <div id="totals-section" class="totals" style="display: none;">
              <h3>Totals</h3>
              <div class="totals-grid">
                <div class="total-item">
                  <span class="total-label">Total Files:</span>
                  <span id="total-files" class="total-value">
                    0
                  </span>
                </div>
                <div class="total-item">
                  <span class="total-label">Total Emails:</span>
                  <span id="total-emails" class="total-value">
                    0
                  </span>
                </div>
              </div>
            </div>

            <div class="search-box">
              <input
                type="text"
                id="search-input"
                placeholder="Search users by name or email..."
                class="search-input"
              />
            </div>

            <div class="users-grid" id="users-grid"></div>
          </div>
        </div>
      )
    }
  </div>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  h1 {
    color: #333;
    margin-bottom: 2rem;
    text-align: center;
  }

  .auth-required {
    text-align: center;
    padding: 4rem 2rem;
    background: #f9f9f9;
    border-radius: 8px;
    margin: 2rem 0;
  }

  .auth-required h2 {
    margin-bottom: 1rem;
    color: #333;
  }

  .auth-required p {
    margin-bottom: 2rem;
    color: #666;
  }

  .auth-button,
  .load-button {
    background: #4285f4;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background 0.2s ease;
  }

  .auth-button:hover,
  .load-button:hover {
    background: #3367d6;
  }

  .auth-button:disabled,
  .load-button:disabled {
    background: #ccc;
    cursor: not-allowed;
  }

  .user-info {
    background: #e8f5e8;
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 2rem;
    border: 1px solid #c8e6c8;
  }

  .user-info p {
    margin: 0 0 1rem 0;
    color: #2e7d2e;
  }

  .loading {
    text-align: center;
    padding: 2rem;
    color: #666;
  }

  .loading-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .loading-text {
    font-size: 1.2rem;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #4285f4;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .progress-info {
    width: 100%;
    max-width: 400px;
    margin-top: 1rem;
  }

  .progress-bar {
    width: 100%;
    height: 8px;
    background-color: #e0e0e0;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.5rem;
  }

  .progress-fill {
    height: 100%;
    background-color: #4285f4;
    transition: width 0.3s ease;
    width: 0%;
  }

  .progress-text {
    font-size: 0.9rem;
    color: #666;
  }

  .error {
    background: #fee;
    color: #c33;
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 1rem;
    border: 1px solid #fcc;
  }

  .stats {
    background: #f5f5f5;
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 1rem;
    text-align: center;
    font-weight: bold;
    color: #555;
  }

  .totals {
    background: #e8f4fd;
    padding: 1.5rem;
    border-radius: 8px;
    margin-bottom: 2rem;
    border: 1px solid #bee5eb;
  }

  .totals h3 {
    margin: 0 0 1rem 0;
    color: #0c5460;
    text-align: center;
  }

  .totals-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .total-item {
    background: white;
    padding: 1rem;
    border-radius: 6px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .total-label {
    display: block;
    font-weight: bold;
    color: #666;
    margin-bottom: 0.5rem;
  }

  .total-value {
    display: block;
    font-size: 1.5rem;
    font-weight: bold;
    color: #0c5460;
  }

  .search-box {
    margin-bottom: 2rem;
  }

  .search-input {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
  }

  .search-input:focus {
    outline: none;
    border-color: #4285f4;
    box-shadow: 0 0 5px rgba(66, 133, 244, 0.3);
  }

  .users-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }

  .user-card {
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease;
  }

  .user-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  .user-name {
    font-weight: bold;
    color: #333;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
  }

  .user-email {
    color: #666;
    margin-bottom: 0.5rem;
    word-break: break-all;
  }

  .user-details {
    font-size: 0.9rem;
    color: #888;
  }

  .user-counts {
    margin: 1rem 0;
    padding: 0.5rem;
    background: #f8f9fa;
    border-radius: 4px;
  }

  .count-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.25rem;
  }

  .count-item:last-child {
    margin-bottom: 0;
  }

  .count-label {
    font-weight: bold;
    color: #666;
  }

  .count-value {
    color: #333;
    font-weight: bold;
  }

  .user-status {
    display: inline-block;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: bold;
    margin-top: 0.5rem;
  }

  .status-active {
    background: #e8f5e8;
    color: #2e7d2e;
  }

  .status-suspended {
    background: #fee;
    color: #c33;
  }

  .hidden {
    display: none !important;
  }
</style>

<script>
  interface User {
    id: string;
    primaryEmail: string;
    name: {
      fullName: string;
      givenName: string;
      familyName: string;
    };
    suspended: boolean;
    creationTime: string;
    lastLoginTime?: string;
    orgUnitPath: string;
    fileCount?: number;
    emailCount?: number;
  }

  let allUsers: User[] = [];

  function fetchUsers() {
    allUsers = [];
    
    const progressInfo = document.getElementById('progress-info');
    const progressFill = document.getElementById('progress-fill');
    const progressCurrent = document.getElementById('progress-current');
    const progressTotal = document.getElementById('progress-total');
    const loadingText = document.querySelector('.loading-text');
    
    // Show progress info
    if (progressInfo) progressInfo.style.display = 'block';
    
    const eventSource = new EventSource('/api/users-stream');
    
    eventSource.addEventListener('start', (event) => {
      const data = JSON.parse(event.data);
      if (progressTotal) progressTotal.textContent = data.totalUsers.toString();
      if (loadingText) loadingText.textContent = `Processing ${data.totalUsers} users...`;
    });
    
    eventSource.addEventListener('batch', (event) => {
      const data = JSON.parse(event.data);
      
      // Add new users to the array
      allUsers.push(...data.users);
      
      // Update progress
      if (progressFill) {
        const percentage = (data.processedCount / data.totalUsers) * 100;
        progressFill.style.width = `${percentage}%`;
      }
      if (progressCurrent) progressCurrent.textContent = data.processedCount.toString();
      
      // Update display with all users processed so far
      displayUsers(allUsers);
      updateStats(allUsers.length);
      
      // Show container if first batch
      if (allUsers.length === data.users.length) {
        const container = document.getElementById('users-container');
        if (container) container.style.display = 'block';
      }
    });
    
    eventSource.addEventListener('complete', () => {
      eventSource.close();
      hideLoading();
      
      if (loadingText) loadingText.textContent = 'Complete!';
      setTimeout(() => {
        if (progressInfo) progressInfo.style.display = 'none';
      }, 1000);
    });
    
    eventSource.addEventListener('error', (event) => {
      const messageEvent = event as MessageEvent;
      try {
        const data = JSON.parse(messageEvent.data);
        showError(data.message || 'Failed to load users');
      } catch {
        showError('Failed to load users');
      }
      eventSource.close();
      hideLoading();
    });
    
    eventSource.onerror = () => {
      eventSource.close();
      hideLoading();
      showError('Connection error occurred');
    };
  }


  function displayUsers(users: User[]) {
    const grid = document.getElementById("users-grid");
    if (!grid) return;

    grid.innerHTML = users
      .map(
        (user) => `
      <div class="user-card">
        <div class="user-name">${escapeHtml(user.name?.fullName || "N/A")}</div>
        <div class="user-email">${escapeHtml(user.primaryEmail)}</div>
        <div class="user-details">
          <div>Created: ${formatDate(user.creationTime)}</div>
          <div>Org Unit: ${escapeHtml(user.orgUnitPath || "N/A")}</div>
          ${user.lastLoginTime ? `<div>Last Login: ${formatDate(user.lastLoginTime)}</div>` : ""}
        </div>
        <div class="user-counts">
          <div class="count-item">
            <span class="count-label">Files:</span>
            <span class="count-value">${user.fileCount !== undefined ? user.fileCount.toLocaleString() : "Loading..."}</span>
          </div>
          <div class="count-item">
            <span class="count-label">Emails:</span>
            <span class="count-value">${user.emailCount !== undefined ? user.emailCount.toLocaleString() : "Loading..."}</span>
          </div>
        </div>
        <div class="user-status ${user.suspended ? "status-suspended" : "status-active"}">
          ${user.suspended ? "Suspended" : "Active"}
        </div>
      </div>
    `,
      )
      .join("");

    // Calculate and display totals
    const totalFiles = users.reduce(
      (sum, user) => sum + (user.fileCount || 0),
      0,
    );
    const totalEmails = users.reduce(
      (sum, user) => sum + (user.emailCount || 0),
      0,
    );

    const totalFilesElement = document.getElementById("total-files");
    const totalEmailsElement = document.getElementById("total-emails");
    const totalsSection = document.getElementById("totals-section");

    if (totalFilesElement)
      totalFilesElement.textContent = totalFiles.toLocaleString();
    if (totalEmailsElement)
      totalEmailsElement.textContent = totalEmails.toLocaleString();
    if (totalsSection) totalsSection.style.display = "block";

    const container = document.getElementById("users-container");
    if (container) {
      container.style.display = "block";
    }
  }

  function searchUsers() {
    const searchInput = document.getElementById(
      "search-input",
    ) as HTMLInputElement;
    if (!searchInput) return;

    const query = searchInput.value.toLowerCase().trim();

    if (query === "") {
      displayUsers(allUsers);
      updateStats(allUsers.length);
      return;
    }

    const filteredUsers = allUsers.filter(
      (user) =>
        user.primaryEmail.toLowerCase().includes(query) ||
        (user.name?.fullName || "").toLowerCase().includes(query) ||
        (user.name?.givenName || "").toLowerCase().includes(query) ||
        (user.name?.familyName || "").toLowerCase().includes(query),
    );

    displayUsers(filteredUsers);
    updateStats(filteredUsers.length, allUsers.length, query);
  }

  function updateStats(count: number, total?: number, query?: string) {
    const statsElement = document.getElementById("user-count");
    if (!statsElement) return;

    if (query && total !== undefined) {
      statsElement.textContent = `${count} of ${total}`;
    } else {
      statsElement.textContent = count.toString();
    }
  }

  function showError(message: string) {
    const errorDiv = document.getElementById("error");
    if (errorDiv) {
      errorDiv.textContent = message;
      errorDiv.style.display = "block";
    }
  }

  function hideLoading() {
    const loadingDiv = document.getElementById("loading");
    if (loadingDiv) {
      loadingDiv.style.display = "none";
    }
  }

  function formatDate(dateString: string): string {
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return "N/A";
    }
  }

  function escapeHtml(text: string): string {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }

  document.addEventListener("DOMContentLoaded", async () => {
    // Handle sign in button
    const signinButton = document.getElementById("signin-button");
    if (signinButton) {
      signinButton.addEventListener("click", async () => {
        try {
          const { actions } = await import("astro:actions");
          const response = await actions.login();

          if (response.data?.url) {
            window.location.href = response.data.url;
          } else {
            alert("Error during authentication");
          }
        } catch (error) {
          alert("Authentication failed");
        }
      });
    }

    // Handle load users button
    const loadUsersButton = document.getElementById(
      "load-users-button",
    ) as HTMLButtonElement;
    if (loadUsersButton) {
      loadUsersButton.addEventListener("click", () => {
        loadUsersButton.disabled = true;
        loadUsersButton.textContent = "Loading...";
        
        const loadingDiv = document.getElementById("loading");
        if (loadingDiv) {
          loadingDiv.style.display = "block";
        }

        fetchUsers();

        // Re-enable button after a short delay to prevent rapid clicking
        setTimeout(() => {
          loadUsersButton.disabled = false;
          loadUsersButton.textContent = "Reload Users";
        }, 2000);
      });
    }

    const searchInput = document.getElementById("search-input");
    if (searchInput) {
      searchInput.addEventListener("input", searchUsers);
    }
  });
</script>
